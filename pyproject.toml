[project]
name = "ai-simple-research-pipeline"
version = "0.1.0"
description = "AI-powered project built with ai-pipeline-core framework"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12"
authors = [
    {name = "bbarwik", email = "bbarwik@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "ai-pipeline-core>=0.2.0",
    "pydantic>=2.11.7",
    "fastapi>=0.116.0",
]

[project.scripts]
ai-simple-research-pipeline = "ai_simple_research_pipeline.__main__:main"

[project.urls]
Homepage = "https://github.com/bbarwik/ai-simple-research-pipeline"
Repository = "https://github.com/bbarwik/ai-simple-research-pipeline"
Issues = "https://github.com/bbarwik/ai-simple-research-pipeline/issues"

[project.optional-dependencies]
dev = [
    "basedpyright>=1.31.2",
    "bump2version>=1.0.1",
    "pre-commit>=4.3.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.8.0",
    "pytest>=8.4.1",
    "ruff>=0.12.9",
]

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "-q -m 'not integration'"
testpaths = ["tests"]
norecursedirs = "test_data"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
source = ["ai_simple_research_pipeline"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
show_missing = true
skip_covered = false

[tool.ruff]
# Configuration for the Ruff linter and formatter
line-length = 100
target-version = "py312"
extend-exclude = ["tests/test_data"]

[tool.ruff.lint]
# Select the rules you want to enforce. 'E' and 'F' are standard.
# 'I' is for import sorting. 'TID' is for banned imports.
select = ["E", "F", "I", "TID252", "T201"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

[tool.ruff.lint.per-file-ignores]
# Allow print statements in scripts directory
"scripts/*.py" = ["T201"]

[tool.ruff.lint.flake8-tidy-imports]
# Enforce relative imports within the same package
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"logging".msg = "Use 'from ai_pipeline_core import get_pipeline_logger' instead of 'import logging'"
"prefect".msg = "Use 'from ai_pipeline_core import pipeline_task, pipeline_flow' or 'from ai_pipeline_core.prefect import task, flow' instead"
"prefect.flow".msg = "Use 'from ai_pipeline_core import pipeline_flow' or 'from ai_pipeline_core.prefect import flow' instead"
"prefect.task".msg = "Use 'from ai_pipeline_core import pipeline_task' or 'from ai_pipeline_core.prefect import task' instead"
"lmnr".msg = "Use 'from ai_pipeline_core import trace, TraceLevel' instead of importing from lmnr"
"prefect.logging".msg = "Use 'from ai_pipeline_core import get_pipeline_logger, disable_run_logger' instead"
"prefect.testing.utilities".msg = "Use 'from ai_pipeline_core import prefect_test_harness' instead"

[tool.basedpyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"

include = [
    "ai_simple_research_pipeline",
    "tests",
]

exclude = [
    "**/__pycache__",
    "**/node_modules",
    ".venv",
    "venv",
    "env",
    ".git",
    "build",
    "dist",
    ".devcontainer",
    "tests/test_data",
]

reportMissingImports = true
reportMissingTypeStubs = "warning"
reportUndefinedVariable = true
reportUnknownParameterType = "warning"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = "warning"
reportAny = "information"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportMissingParameterType = "warning"

[tool.bumpversion]
current_version = "0.1.0"
commit = true
tag = true
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "ai_simple_research_pipeline/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["ai_simple_research_pipeline"]
include = [
  "ai_simple_research_pipeline/py.typed",
  "ai_simple_research_pipeline/**/*.yml",
  "ai_simple_research_pipeline/**/*.json",
  "ai_simple_research_pipeline/**/*.jinja",
  "ai_simple_research_pipeline/**/*.jinja2",
  "ai_simple_research_pipeline/**/*.j2",
]

[tool.hatch.build.targets.sdist]
include = [
    "ai_simple_research_pipeline/**/*.py",
    "ai_simple_research_pipeline/py.typed",
    "ai_simple_research_pipeline/**/*.yml",
    "ai_simple_research_pipeline/**/*.jinja",
    "ai_simple_research_pipeline/**/*.jinja2",
    "ai_simple_research_pipeline/**/*.j2",
    "ai_simple_research_pipeline/**/*.json",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]
